{"version":3,"file":"docs-script.bundle.js","mappings":"mBAAA,IAAKA,GAAL,SAAKA,GACJ,kBACA,kBAFD,CAAKA,IAAAA,EAAa,KAKlB,MAAMC,EAAYC,OAAOC,OAAO,CAC/BC,SAAU,eACVC,QAAS,0BA0DV,SAASC,EAAoBC,GAC5B,IAAIC,EAEJ,MAAMC,EAAeF,EAASG,aAAa,iBAU3C,OARID,IACHD,EAAYG,SAASC,eAAeH,SAAiBI,GAGjDL,IACJA,EAAYD,EAASO,QAAqBb,EAAUG,gBAAaS,GAG3DL,EAyBR,SAASO,EAAkBP,GAC1B,MAAMQ,EAAeR,EAAUE,aAAa,iBAE5C,MAAqB,SAAjBM,EACIhB,EAAciB,OACM,UAAjBD,EACHhB,EAAckB,YADf,EAWR,SAASC,EAAkBX,EAAwBY,GAGlD,GAFqBL,EAAkBP,KAElBY,EACpB,OAGD,MAAMC,EA0DP,SAA8Bb,GAI7B,OAHqBc,MAAMC,KAAKZ,SAASa,iBAA8BvB,EAAUI,UAC1CoB,QAAQlB,GAAaD,EAAoBC,KAAcC,IA5D5EkB,CAAqBlB,GAEvC,OAAQY,GACP,KAAKpB,EAAciB,OAClBT,EAAUmB,aAAa,gBAAiB,QACxCN,EAAUO,SAASrB,GAAaA,EAASoB,aAAa,gBAAiB,UACvE,MACD,KAAK3B,EAAckB,OAClBV,EAAUmB,aAAa,gBAAiB,SACxCN,EAAUO,SAASrB,GAAaA,EAASoB,aAAa,gBAAiB,YAmB1E,SAASE,IAIR,MAAMC,EAAUnB,SAASoB,cAA2B,WAEpD,GAAID,EAAS,CAEZ,IACC,IAAItB,EAA4CsB,EAAQhB,QAAqBb,EAAUG,UACvFI,EACAA,EAAYA,EAAUwB,eAAelB,QAAQb,EAAUG,UAEvDe,EAAkBX,EAAWR,EAAciB,QAI5CgB,OAAOC,YAAW,IAAMJ,EAAQK,kBAAkB,IA9InDxB,SAASyB,iBAAiB,SAW3B,SAAmCC,GAClC,MAAMP,EAAUO,EAAEC,OAElB,GAAIR,aAAmBS,YAAa,CACnC,MAAMhC,EAAWuB,EAAQhB,QAAqBb,EAAUI,SACxD,GAAIE,EAAU,CACb8B,EAAEG,iBAEF,MAAMhC,EAAYF,EAAoBC,GAClCC,GAqCP,SAAyBA,GACVO,EAAkBP,KAElBR,EAAciB,OAC3BE,EAAkBX,EAAWR,EAAckB,QAE3CC,EAAkBX,EAAWR,EAAciB,QA1CzCwB,CAAgBjC,QAnBnByB,OAAOG,iBAAiB,aAAcP,GAiHnBlB,SAASa,iBAA8BvB,EAAUG,UAEzDwB,SAASpB,GAAcW,EAAkBX,EAAWR,EAAckB,UA7H7EwB,sBAAsBb,I","sources":["webpack://@cipscis/expander/./src/expander.ts"],"sourcesContent":["enum ExpanderState {\n\tOPENED = 'Opened',\n\tCLOSED = 'Closed',\n}\n\nconst selectors = Object.freeze({\n\texpander: '.js-expander',\n\ttrigger: '.js-expander__trigger',\n});\n\n/**\n * Initialise the Expander module.\n */\nfunction init() {\n\t_initEvents();\n\n\t_closeAll();\n\n\t// _openByTarget uses the ':target' CSS pseudo-class, which doesn't\n\t// match anything immediately on page load. Requesting an animation\n\t// frame delays things for long enough for it to work.\n\trequestAnimationFrame(_openByTarget);\n}\n\n/**\n * Initialise events for the Expander module.\n */\nfunction _initEvents() {\n\t// TODO: Use @cipscis/activate\n\tdocument.addEventListener('click', _processTriggerClickEvent);\n\n\twindow.addEventListener('hashchange', _openByTarget);\n}\n\n/**\n * If a trigger element is clicked, determine which expander\n * it controls and toggle its state.\n *\n * @param {MouseEvent} e\n */\nfunction _processTriggerClickEvent(e: MouseEvent): void {\n\tconst $target = e.target;\n\n\tif ($target instanceof HTMLElement) {\n\t\tconst $trigger = $target.closest<HTMLElement>(selectors.trigger);\n\t\tif ($trigger) {\n\t\t\te.preventDefault();\n\n\t\t\tconst $expander = _getTriggerExpander($trigger);\n\t\t\tif ($expander) {\n\t\t\t\t_toggleExpander($expander);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Determine which expander element is controlled by a given trigger.\n *\n * @param  {HTMLElement} $trigger - The trigger element whose target\n * is being found.\n *\n * @return {HTMLElement} - The expander element controlled\n * by the specified trigger.\n */\nfunction _getTriggerExpander($trigger: HTMLElement): HTMLElement | undefined {\n\tlet $expander: HTMLElement | undefined;\n\n\tconst ariaControls = $trigger.getAttribute('aria-controls');\n\n\tif (ariaControls) {\n\t\t$expander = document.getElementById(ariaControls) || undefined;\n\t}\n\n\tif (!$expander) {\n\t\t$expander = $trigger.closest<HTMLElement>(selectors.expander) || undefined;\n\t}\n\n\treturn $expander;\n}\n\n/**\n * If an expander is open, close it. Otherwise, open it.\n *\n * @param {HTMLElement} $expander - The expander element to toggle.\n */\nfunction _toggleExpander($expander: HTMLElement): void {\n\tconst state = _getExpanderState($expander);\n\n\tif (state === ExpanderState.OPENED) {\n\t\t_setExpanderState($expander, ExpanderState.CLOSED);\n\t} else {\n\t\t_setExpanderState($expander, ExpanderState.OPENED);\n\t}\n}\n\n/**\n * Determine the current state of an expander element.\n *\n * @param  {HTMLElement} $expander - The expander element to check.\n *\n * @return {ExpanderState} - The current state of the expander element.\n */\nfunction _getExpanderState($expander: HTMLElement): ExpanderState | undefined {\n\tconst ariaExpanded = $expander.getAttribute('aria-expanded');\n\n\tif (ariaExpanded === 'true') {\n\t\treturn ExpanderState.OPENED;\n\t} else if (ariaExpanded === 'false') {\n\t\treturn ExpanderState.CLOSED;\n\t}\n}\n\n/**\n * Set the current tate of an expander element.\n *\n * @param {HTMLElement} $expander - The expander element to affect.\n * @param {ExpanderState} state - The desired state of the expander element.\n */\nfunction _setExpanderState($expander: HTMLElement, state: ExpanderState): void {\n\tconst currentState = _getExpanderState($expander);\n\n\tif (currentState === state) {\n\t\treturn;\n\t}\n\n\tconst $triggers = _getExpanderTriggers($expander);\n\n\tswitch (state) {\n\t\tcase ExpanderState.OPENED:\n\t\t\t$expander.setAttribute('aria-expanded', 'true');\n\t\t\t$triggers.forEach(($trigger) => $trigger.setAttribute('aria-expanded', 'true'));\n\t\t\tbreak;\n\t\tcase ExpanderState.CLOSED:\n\t\t\t$expander.setAttribute('aria-expanded', 'false');\n\t\t\t$triggers.forEach(($trigger) => $trigger.setAttribute('aria-expanded', 'false'));\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Close all expanders.\n */\nfunction _closeAll(): void {\n\tconst $expanders = document.querySelectorAll<HTMLElement>(selectors.expander);\n\n\t$expanders.forEach(($expander) => _setExpanderState($expander, ExpanderState.CLOSED));\n}\n\n/**\n * If the :target element is an expander element or a descendent of an\n * expander element, expand all expanders containing it then scroll\n * to that element\n */\nfunction _openByTarget(): void {\n\t// TODO: Allow clicking an anchor link to the current hash to\n\t// force relevant expanders to open again, if they've been closed\n\n\tconst $target = document.querySelector<HTMLElement>(':target');\n\n\tif ($target) {\n\t\t// Loop through all ancestral expanders and open them.\n\t\tfor (\n\t\t\tlet $expander: HTMLElement | null | undefined = $target.closest<HTMLElement>(selectors.expander);\n\t\t\t$expander;\n\t\t\t$expander = $expander.parentElement?.closest(selectors.expander)\n\t\t) {\n\t\t\t_setExpanderState($expander, ExpanderState.OPENED);\n\t\t}\n\n\t\t// Scroll to the target element. Only works if asynchonous\n\t\twindow.setTimeout(() => $target.scrollIntoView(), 0);\n\t}\n}\n\n/**\n * Get all trigger elements that control a given expander element.\n *\n * @param  {HTMLElement} $expander - The expander element whose triggers\n * should be returned.\n *\n * @return {NodeListOf<HTMLElement>} - A list of the triggers controlling\n * the specified expander element.\n */\nfunction _getExpanderTriggers($expander: HTMLElement): HTMLElement[] {\n\tconst $allTriggers = Array.from(document.querySelectorAll<HTMLElement>(selectors.trigger));\n\tconst $matchingTriggers = $allTriggers.filter(($trigger) => _getTriggerExpander($trigger) === $expander);\n\n\treturn $matchingTriggers;\n}\n\nexport {\n\tinit,\n};\n"],"names":["ExpanderState","selectors","Object","freeze","expander","trigger","_getTriggerExpander","$trigger","$expander","ariaControls","getAttribute","document","getElementById","undefined","closest","_getExpanderState","ariaExpanded","OPENED","CLOSED","_setExpanderState","state","$triggers","Array","from","querySelectorAll","filter","_getExpanderTriggers","setAttribute","forEach","_openByTarget","$target","querySelector","parentElement","window","setTimeout","scrollIntoView","addEventListener","e","target","HTMLElement","preventDefault","_toggleExpander","requestAnimationFrame"],"sourceRoot":""}